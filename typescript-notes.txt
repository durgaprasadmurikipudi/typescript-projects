For compiling typescript you need two modules, a global typescript module and ts-node module to quickly execute ts scripts.
General convention is to ompile the .ts file into js file and then run it via node.
to combine these oepratiosn ts-node is used.
so instead of tsc index.ts && node index.js, we can write ts-node index.ts

Typs in typescript:
Primitive Types: number, boolean, void, undefined, string, symbol, null
Object Types: functions, arrays, classes, objects

type annotations vs type inference
type inference: if declaration and initialization on same line, else any
When type annotations?
  1. when we declare varaible and initialize it it a later point of time or line.
  2. when we assign it a type variable that can't be inferred, probably custom type.
  3. when a function returns as any type and yo uwant to clarify the return value.

Type annotation for function will tell what parameters will the function receive and what value type it will return.
Type inference for a function can only infer max of what value type it will return.

Generally for any node module to work with typescript needs type definitiuon file for it, generally these are provided by 
library maintainer or some random person could create this to help the javascript community and might put it as a package.
The types library is the most famous one and has type definiton file for almost all popular libraries.

When you use a pipe operator what typescript does is, it will allow only common properties and methods that are present on
all the types that were piped to be accessed on the instance created out of it. Else it will throw a error.

just like npm init -y
tsc hjas a init file which creates a config file that can allow you to customize your build process.
it creates a tsconfig.json file and is checked automatically by tsc compiler every time before it starts compiling.
Basically you configure root source folder and the build folder.
And after this setting is done all you need to do is just type in tsc at terminal and it will compile automatically all
the files present in .src folder and will create the output files, js files in build folder that you configured. 
You calso have -w flag, that is watch flag!

You can do npm init -y and npm install nodemon concurrently and create yourself a automatic process.

You might be shocked to learn that js strings are immutable in a way taht if we have a string color = 'red';
then it will show color[0] as 'r', but assign it like color[0] = 'Y'; and do a console.log on color, then it will again \
show color value as 'red' only.

As a result if you create a union type with array type and string then you cannot set the value of array by accessing its index.
So beware! But typescript is really samrt as soon as you put a typegaurd any block of code, the property whatever is used in
typegaurding check will behave specifically as that target typee for whatever is checked.
for example if a collection is typed as number[] | string;
now collection is no more allowed to manipulate via index accesing, but as soon as you 
do this check if(collection instanceof Array) { /* here you can access colletion as if its only array */ }

For typegarud to work proeprly use 'typeof' on primitive types and check for 'instance of' for reference types.

If yu remember how the sorter is implemented as a concrete class rather than abstract class, you might have seen that it needs
access to child class instance directly and there is lot of code verbiage wfor interaction
Now making it abstract, the this will dynamically point at child class methods making instance methods of child class accessible
and thus making the sorter reusable all the way for anything that confirms to interface sortable.

Ofcourse any thing that is inheriting sortable will confirm to interface sortable since, it is abstract class and the child methods
implementing them should definitely provide a concrete implementation!

So for multiple objects interaction interfaces help you in forming a smoother communication.
thats when implemented above in sorter project, you will have sorter as a concreate class and it expects some itnerface to be 
exposed by every object that it wants to act on. This is where interfaces come up and help all the child classes confirm what
to contract specification which sorter is expecting.

The main advantage of it is loose coupling and promotes different objects to communicate together.

A better example is in maps project where we imposed a specific contract on 'user' and 'company' which are 2 very dissimilar classes
so that map class can consume them. 

Abstract classes come up where multiple classes can have reusable code.
Abstract classes impose some contract rules on all child classes so  that they can make use of common code present in parent class.
So abastract classes can be used where you have code re use and want to form a child parent relation ship between 2 classes for code 
reuse. And it will result in tight coupling as the name of the relation ship type suggests!

Even for node libraries as well, in typescript we have to install type definition file of that libraries.
Generally for any otehr library we might do @types/name_of_that_library. But for node libraries you need not specically name 
wghatever library that yo uare using itn node all you need to di is @types/node.

Generally if you do not install the type definiton file for node, ts incorrectly reports that it could not find this module, so 
lookout for that error.

Inheritance vs Composition:
If you see the stats project, there was a great use of Generics and Inheritance.
It could also be done by composition.

In case of inehritance way, what we did was we extracted some reading functionality and in child class we modified some 
reading functionality as what it returned.
As a result we created 2 classes, CsvFileReader and MatchReader.
CsvFileReader does the reading from CsvFiles and MatchReader modifies the data returned from CsvFileReader.

All well and good, how would we have done it if we have used the composition way ?
We would have introduced an interface as what reader class should implement, and then in match reader we took in any reader
and let it do the reading, from the data it returned we would modify it to way we liked.
Suppose in future we introduced the data reading from api, all we need to do is create a APIReader and send it to MatchReader
and thats it. Just write the functionaly of API Reader and need not do any changes in match reader.
So as you see in inheritance there is tightcoupling, where as in composition there is loose coupling and also promotes
principle of single responsibility for each class.

To Learn more about differnces between inheritance and composition, look at below example:

lets saw we have a wall and window classes,
general definiton of them would be :
class Wall {
  color: string,
  height: number,
  width: number,
  area(): number
}

class Window {
  isOpen(): boolean,
  toggleOpen(): void,
  height: number,
  width: number,
  area(): number
}

Because you thought the height, width, area are common across you created a class Reactangle and tied window and wall to
class reactangle to make use of the common properties.

class Rectangle {
  height: number,
  width: number,
  area(): number
}


class Wall ext Rectangle {
  color: string
}

class Window ext Rectangle {
  isOpen(): boolean,
  toggleOpen(): void,
}

But what if there is a circle window ?
:O

class Circle {
  radius: number,
  area(): number
}


class CircleWindow ext Rectangle {
  isOpen(): boolean,
  toggleOpen(): void, /********************** see how the widnow class methods are duplciated across normal window and circular 
                      *********************** window class */
}

How would it look if we have built it in composition way,
class Wall {
  color: string,
  area(): number,
  dimensions: shape // where shape is the interface, the area  call would be diverted to whatever the dimensions area method is.
}

class Window {
  isOpen(): boolean,
  toggleOpen(): void,
  area(): number,
  dimensions: shape
}

class Rectangle {
  height: number,
  width: number,
  area(): number
}

class Circle {
  radius: number,
  area(): number
}

So here we are achieving compoistion via delegation , this sis what SG explained in his course as well taking the reference of 
Design patterns, and so in JS prototypal inheritance is actually delegating and hence from a long time we are doing composition
in Javascript ;) under name of inheritance :P
Composition is not literal meaning where the desrired method is copied to the objet that we are currently working on,
but the deleagation of a work to the most appropriate object by having a reference to it!!!

thats what traditional "multiple" inheritance in c++ suffer with, becuase when they inherit they almost make a copy of the methods available
all from a long parent children releationships, if in the way down you have same methods names in 2 different classes
you are doomed.
But the composition refers to a specific instannce and  delegates its activity to that instance only.

Generics can also be used on functions and type inference helps even if you donot pass the specific type
while invoking. You can also impose cosntraitns such as T implements some_interface to restrict, that 
could be passed on as params.

The fascinating thing about Typescript is the variety of custom types  that we can create.
For ex: I can say type bestName: 'stephen';
now when I say printName(name: bestName): void {}
Here printName function will not accept any otehr string than 'stephen' as its input.
That's it you have created a string 'stephen' as one of a type.

so when I write get<K extends keyof T>(key: K): T[K], 
then I am virtually creating each proeprty in Type T as its own type, for example if T has proeprties 'name', 'age', then
essentially above syntax equals to creating overload functions of get function where each of its param is a property in T
and the return value is of type what ever type T[K] represents.

That way I am enforcing get function to only accepting that types which are properties of recieving type T and perfectly
satisfying the criteria of Type safety system philosophy of TS.

While setting up composition in User class, we directly referred via accessors, events or attribute class functions,
since they have their own data and when this is passed it is referring to USer rather than the attributes or event instance,
thus never be able to get the value of required properties present inattributes or event class,
it can be solved by arrow functions and was solved that way.

You see we wanted to favor composition and delegated storing data to Sync, delegated having properties to interface and Attributes.
And then delegated event activities to Event. But in that case we also did use accessors to avoid syntax like user.attributes.get
something like that. The downside is we cannot write accessors to every otehr new model that we create, instead we should
write a common model that does all teh delegation to this Sync and otehr utility classes for common functionality across app models,
then inherit this Model class for all otehr business Model classes like User, CommentBox etc so that you need not duplicate this 
delegation code. Why not compose model class? then again we would have to write accessors to direct all the common utility method
 calls to Model class. See we cant always favor composition and this is one great example where inheritance wins.

Decorators are functions that can be used to change/modify/anything different properties/methods in the class.
Not in the same as Javascript decorators.Used inside classes only. Understanding the order in which they run is the key to 
understanding decorators.

React - redux - typescript -- integration:

How to create react app out of box using typescript.
npx create-react-app rrts --typescript

A basic component in typescript

import React from 'react';
import ReactDOM from 'react-dom';

import Sample from './components/Sample';

Every component is a generic component which takes in two types, one each for props and state.
So you declare the props type, the props that this component is expecting
interface AppProps {
  color: string;
};

And also the state type as well, that this component will maintain
interface AppState {
  counter: number;
};

And instantiate the componetn with those respective types, else you will get a error, neither you can access 
which is not there in mentioned types nor you can directly manipulate thenm as they are readonly.
export default class App extends React.Component<AppProps, AppState> {
  constructor(props: AppProps) {
    super(props);

    this.state = {
      counter: 0
    }
  }

Beautifully delcaring every function return type and being a good typescript boy!
  increment = (): void => {
    this.setState((prevState) => {
      return {
        counter: prevState.counter + 1
      }
    })
  }

  decrement = (): void => {
    this.setState((prevState) => {
      return {
        counter: prevState.counter - 1 
      }
    })
  }

  render() {
    return (
      <div>
        <div>{this.props.color}</div>
        <div>
          <button onClick={this.increment}>+</button>
          <button onClick={this.decrement}>-</button>
          {this.state.counter}
        </div>
        <Sample text='Hi There'/>
      </div>
    );
  }
};

Lets see a basic component integrated with redux via connect method.
import React from 'react';
import { connect } from 'react-redux';
// Declare all the actions types action creator functions before hand
import { Todo, fetchTodos, deleteTodo } from './actions';
// You also declare the state structure before hand more on that later.
Here you brought in this type so that you can mention the type for mapStateToProps input param.
Pretty solid no!?
import { StoreState } from './reducers';

//mentioning the props type of the component and also declare teh action creator functions as generic ones if you dont want to 
// make a big mess yet!
interface AppProps {
  todos: Todo[];
  fetchTodos(): any;
  deleteTodo(id: number): any;
};

class App extends React.Component<AppProps> {
  componentDidMount() {
    this.props.fetchTodos();
  }

  // See see JSX element type :O
  renderList(): JSX.Element[] {
    return this.props.todos.map(todo => (<div key={todo.id} onClick={() => this.props.deleteTodo(todo.id)}>{todo.title}</div>));
  }

  render() {
    return (
    <div>{this.renderList()}</div>
    );
  }
};

// We being a good boy, we always mention the state type and so its structure and the return type for every function!
const mapStateToProps = (state: StoreState): { todos: Todo[] } => {
  return {
    todos: state.todos
  };
};

// Yup yup no mapdispatchtoProps, its too messy :P
export default connect(mapStateToProps, { fetchTodos, deleteTodo })(App);

//For all the imports below you will get teh type definition files by default but for react-redux library, you have to get it
// from @types/react-redux
import React from 'react';
import ReactDOM from 'react-dom';
import App from './App';
import { createStore, applyMiddleware } from 'redux';
import { Provider } from 'react-redux';
import thunk from 'redux-thunk';

import {mainReducer} from './reducers';

const store = createStore(mainReducer, applyMiddleware(thunk));

//Getting all types for redux as well
import axios from 'axios';
import { Dispatch } from 'redux';

import { ActionTypes } from './types';

//Mentionign each structure for each reducer type
export interface Todo {
  id: number;
  title: string;
  completed: boolean;
}

// And also the type of each action type
export interface SetTodoAction {
  type: ActionTypes.setTodos;
  payload: Todo[];
}

export interface DeleteTodoAction {
  type: ActionTypes.deleteTodo;
  payload: number;
}

//then you write the action creator Beautifully
export const fetchTodos = () => {
  return async (dispatch: Dispatch) => {
    const response = await axios.get<Todo[]>('https://jsonplaceholder.typicode.com/todos/');

    //The lovely magic of generics!, dispatch takes in param to know and check if a valid type is being passed!
    dispatch<SetTodoAction>({
      type: ActionTypes.setTodos,
      payload: response.data
    });
  }
}

export const deleteTodo = (id: number): DeleteTodoAction => {
  return {
    type: ActionTypes.deleteTodo,
    payload: id
  };
};

Always mention the action types in enum, you can also leave it to default to numeric values, nothing wrong in that.
export enum ActionTypes {
  setTodos = 'SET_TODOS',
  deleteTodo = 'DELETE_TODO'
}

import { combineReducers } from 'redux';

import { todosReducer } from './todos';
import { Todo } from '../actions';

//See how the state structure is being mentioned
export interface StoreState {
  todos: Todo[]
}

// Pass this type to combineReducers and you will see that it will alwyas check the store state to confirm to this type!
export const mainReducer = combineReducers<StoreState>({
  todos: todosReducer
});

import { Todo, SetTodoAction, DeleteTodoAction } from '../actions';
import { ActionTypes } from '../actions/types';

//The only problem is for declaring the action type, generally we just union all the action types for this reducer
export const todosReducer = (state: Todo[] = [], action: SetTodoAction | DeleteTodoAction): Todo[] => {
  switch(action.type) {
    // The typescript intelligence comes out here, each case statement is a typegaurd! So action payload is not some union type\
    // but exactly that type which it is supposed to be!
    case ActionTypes.setTodos:
      return action.payload;
    case ActionTypes.deleteTodo:
      return state.filter((todo: Todo) => todo.id !== action.payload);
    default: 
      return state;
  }
}

Adios baby! Until next time, TS Course half bakedly complete. But enough for now!